package threadPool.execute_submit;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class ExecuteVsSubmitExample {

	public static void main(String[] args) throws Exception {
		ExecutorService executorService = Executors.newFixedThreadPool(2);
		ExecutorService threadPool = new ThreadPoolExecutor(2, 100, 60L, TimeUnit.SECONDS,
				new SynchronousQueue<Runnable>());

		for (int i = 0; i < 10; i++) {
			Runnable runnable = new Runnable() {
				@Override
				public void run() {
					// 스레드 총 개수 및 작업 스레드 이름 출력
					// ThreadPoolExecutor threadPoolExecutor =
					// (ThreadPoolExecutor) executorService;
					ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) threadPool;
					int poolSize = threadPoolExecutor.getPoolSize();
					String threadName = Thread.currentThread().getName();
					System.out.println("[총 스레드 개수: " + poolSize + "] 작업 스레드 이름: " + threadName);
					// 예외 발생 시킴
					int value = Integer.parseInt("삼");// 에러 발생
				}
			};

			// executorService.execute(runnable);//리턴값을 받지 못함
			executorService.submit(runnable); // 리턴값을 받음

			Thread.sleep(10);
		}

		// executorService.shutdownNow();
		executorService.shutdown();
	}
}